# handlers/infect.py
"""Basic infection and vaccine purchase commands."""
from datetime import datetime, timedelta, timezone
from typing import Dict, Tuple
import re

from aiogram import Router, types, F
from tortoise.exceptions import DoesNotExist

from services.lab_service import (
    get_player_cached,
    get_lab_cached,
    get_skill_cached,
    get_stats_cached,
    process_pathogens,
)
from models.player import Player
from utils.formatting import short_number

router = Router()

# –∫–ª—é—á ‚Äì (attacker_id, target_id), –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è
_infection_cd: Dict[Tuple[int, int], datetime] = {}


@router.message(F.text.regexp(r'^–∑–∞—Ä–∞–∑–∏—Ç—å', flags=re.IGNORECASE))
async def infect_user(message: types.Message):
    """Infect another user consuming one pathogen."""
    attacker_id = message.from_user.id

    try:
        attacker_player = await get_player_cached(attacker_id)
    except DoesNotExist:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

    attacker_lab = await get_lab_cached(attacker_player)
    attacker_stats = await get_stats_cached(attacker_lab)
    attacker_skills = await get_skill_cached(attacker_lab)
    await process_pathogens(attacker_lab, attacker_skills)

    now = datetime.now(timezone.utc)
    if attacker_lab.fever_until and attacker_lab.fever_until > now:
        return await message.answer(
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–∂–∞—Ç—å –¥—Ä—É–≥–∏—Ö, –ø–æ–∫–∞ —É –≤–∞—Å –≥–æ—Ä—è—á–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–∫—É–ø–∏—Ç—å –≤–∞–∫—Ü–∏–Ω—É."
        )

    if attacker_lab.free_pathogens <= 0:
        return await message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–∞—Ç–æ–≥–µ–Ω–æ–≤ –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è")

    # Determine target
    if message.reply_to_message:
        target_user = message.reply_to_message.from_user
    else:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            return await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞—Ä–∞–∂–µ–Ω–∏—è")
        ref = parts[1]
        if ref.startswith('@'):
            try:
                target_user = await message.bot.get_chat(ref)
            except Exception:
                return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            try:
                target_user = await message.bot.get_chat(int(ref))
            except Exception:
                return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    if target_user.id == attacker_id:
        return await message.answer("–ù–µ–ª—å–∑—è –∑–∞—Ä–∞–∑–∏—Ç—å —Å–µ–±—è")

    cooldown_key = (attacker_id, target_user.id)
    last_attack = _infection_cd.get(cooldown_key)
    if last_attack and now - last_attack < timedelta(hours=3):
        remaining = timedelta(hours=3) - (now - last_attack)
        minutes_left = int(remaining.total_seconds() // 60)
        hours_left = minutes_left // 60
        minutes_left %= 60
        return await message.answer(
            "‚è±Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ "
            f"<code>{hours_left} —á. {minutes_left} –º–∏–Ω</code>.",
            parse_mode="HTML",
        )

    _infection_cd[cooldown_key] = now

    target_player, _ = await Player.get_or_create(
        telegram_id=target_user.id,
        defaults={"full_name": target_user.full_name},
    )
    target_lab = await get_lab_cached(target_player)
    target_stats = await get_stats_cached(target_lab)

    attacker_lab.free_pathogens -= 1
    await attacker_lab.save()

    fever_minutes = min(attacker_skills.lethality, 60)
    infection_days = attacker_skills.lethality
    target_lab.fever_until = now + timedelta(minutes=fever_minutes)
    target_lab.infection_until = now + timedelta(days=infection_days)
    await target_lab.save()

    attacker_stats.bio_experience += 1000
    await attacker_stats.save()
    target_stats.infected_count += 1
    await target_stats.save()

    attacker_link = f"<a href=\"tg://openmessage?user_id={attacker_id}\">{message.from_user.full_name}</a>"
    target_link = f"<a href=\"tg://openmessage?user_id={target_user.id}\">{target_user.full_name}</a>"

    pathogen_name = attacker_lab.pathogen_name
    if pathogen_name:
        pathogen_phrase = f"–ø–∞—Ç–æ–≥–µ–Ω–æ–º ¬´{pathogen_name}¬ª"
    else:
        pathogen_phrase = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç–æ–≥–µ–Ω–æ–º"

    text = (
        f"ü¶† {attacker_link} –ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é {pathogen_phrase} {target_link}\n"
        f"<blockquote>‚ò†Ô∏è –ì–æ—Ä—è—á–∫–∞ –Ω–∞ {fever_minutes} –º–∏–Ω—É—Ç\n"
        f"ü§í –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ {infection_days} –¥–Ω–µ–π\n"
        f"‚ò£Ô∏è +1k –±–∏–æ-–æ–ø—ã—Ç–∞</blockquote>"
    )
    await message.answer(text, parse_mode="HTML")

    try:
        await message.bot.send_message(
            target_user.id,
            (
                "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –í–∞—à–µ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–æ–∫–ª–∞–¥—ã–≤–∞–µ—Ç:\n"
                "–ë—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 –ø–æ–ø—ã—Ç–∫–∞ –í–∞—à–µ–≥–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è\n"
                f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞—Ä–∞–∂–µ–Ω–∏—è: {attacker_link}\n\n"
                f"<blockquote>ü¶† {attacker_link} –ø–æ–¥–≤–µ—Ä–≥ –∑–∞—Ä–∞–∂–µ–Ω–∏—é {pathogen_phrase} {target_link}‚Å¨\n"
                f"‚ò†Ô∏è –ì–æ—Ä—è—á–∫–∞ –Ω–∞ {fever_minutes} –º–∏–Ω—É—Ç\n"
                f"ü§í –ó–∞—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ {infection_days} –¥–Ω–µ–π\n"
                f"‚ò£Ô∏è +263 –±–∏–æ-–æ–ø—ã—Ç–∞</blockquote>"
            ),
            parse_mode="HTML",
        )
    except Exception:
        pass



@router.message(F.text.regexp(r'^!–∫—É–ø–∏—Ç—å\s+–≤–∞–∫—Ü–∏–Ω—É$', flags=re.IGNORECASE))
async def buy_vaccine(message: types.Message):
    """Purchase a vaccine to cure fever."""
    user_id = message.from_user.id
    try:
        player = await get_player_cached(user_id)
    except DoesNotExist:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

    lab = await get_lab_cached(player)
    stats = await get_stats_cached(lab)

    now = datetime.now(timezone.utc)
    if not lab.fever_until or lab.fever_until <= now:
        return await message.answer("<b>üìù –£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ä—è—á–∫–∏.</b>")

    seconds_left = int((lab.fever_until - now).total_seconds())
    price_per_second = 2000 / (60 * 60)
    cost = max(0, int(price_per_second * seconds_left))

    if cost > stats.bio_resource:
        return await message.answer("<b>‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –≤–∞–∫—Ü–∏–Ω—É.</b>")

    stats.bio_resource -= cost
    await stats.save()

    lab.fever_until = None
    await lab.save()

    await message.answer(
        f"üíâ <b>–í—ã –∏–∑–ª–µ—á–∏–ª–∏—Å—å –æ—Ç –≥–æ—Ä—è—á–∫–∏.</b>\n"
        f"üß¨ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞–∫—Ü–∏–Ω—ã</b> : <code>{short_number(cost)}</code> –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤"
    )
