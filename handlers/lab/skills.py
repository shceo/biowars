from aiogram import Router, types, F
import re
from tortoise.exceptions import DoesNotExist

from services.lab_service import (
    get_player_cached,
    get_lab_cached,
    get_skill_cached,
    get_stats_cached,
    process_pathogens,
)
from utils.formatting import short_number
from keyboards.lab_kb import confirm_keyboard, hide_keyboard

UPGRADE_PARAMS = {
    "infectivity": {
        "emoji": "ü¶†",
        "name": "–∑–∞—Ä–∞–∑–Ω–æ—Å—Ç–∏ –ø–∞—Ç–æ–≥–µ–Ω–∞",
        "growth": 2.5,
        "command": "++–∑–∑",
    },
    "immunity": {
        "emoji": "üõ°",
        "name": "–∏–º–º—É–Ω–∏—Ç–µ—Ç–∞",
        "growth": 2.6,
        "command": "++–∏–º–º—É–Ω–∏—Ç–µ—Ç",
    },
    "lethality": {
        "emoji": "‚ò†Ô∏è",
        "name": "–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç–∏",
        "growth": 1.95,
        "command": "++–ª–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å",
    },
    "safety": {
        "emoji": "üïµÔ∏è‚Äç‚ôÇÔ∏è",
        "name": "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "growth": 2.09,
        "command": "++–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
    },
    "qualification": {
        "emoji": "üë®‚Äçüî¨",
        "name": "–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "growth": 2.4,
        "command": "++–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è",
    },
    "pathogen": {
        "emoji": "üß™",
        "name": "–ø–∞—Ç–æ–≥–µ–Ω–∞",
        "growth": 2.0,
        "command": "++–ø–∞—Ç–æ–≥–µ–Ω",
    },
}

COMMAND_TO_FIELD = {
    params["command"]: field for field, params in UPGRADE_PARAMS.items()
}


def calc_cost(field: str, level: int) -> int:
    """
    –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–ø–≥—Ä–µ–π–¥–∞ –ø–æ–ª—è `field` —Å —É—Ä–æ–≤–Ω—è `level` –¥–æ `level+1`,
    –ø–æ —Ñ–æ—Ä–º—É–ª–µ: (level+1)**growth.
    """
    growth = UPGRADE_PARAMS[field]["growth"]
    price = (level + 1) ** growth
    return int(round(price))


def calc_total_cost(field: str, level: int, amount: int) -> int:
    """–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å `amount` –∞–ø–≥—Ä–µ–π–¥–æ–≤ –ø–æ–¥—Ä—è–¥."""
    total = 0
    for i in range(amount):
        total += calc_cost(field, level + i)
    return total


def calc_max_purchase(field: str, level: int, available: float, limit: int = 100) -> tuple[int, int]:
    """–ú–∞–∫—Å–∏–º—É–º —É—Ä–æ–≤–Ω–µ–π –∏ –∏—Ö —Ü–µ–Ω–∞ –ø—Ä–∏ –ª–∏–º–∏—Ç–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö."""
    bought = 0
    spent = 0
    while bought < limit:
        cost = calc_cost(field, level + bought)
        if spent + cost > available:
            break
        spent += cost
        bought += 1
    return bought, spent


router = Router()

@router.callback_query(F.data.startswith("upgrade:"))
async def upgrade_skill(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        _, field, owner = callback.data.split(":", 2)
    except ValueError:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", show_alert=True)
    if int(owner) != user_id:
        return await callback.answer("–Ω–µ —à–∞–ª–∏, —à–∞–ª—É–Ω–∏—à–∫–∞", show_alert=True)

    try:
        player = await get_player_cached(user_id)
    except DoesNotExist:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start", show_alert=True)

    lab    = await get_lab_cached(player)
    skills = await get_skill_cached(lab)
    params = UPGRADE_PARAMS.get(field)
    if not params:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", show_alert=True)

    current = getattr(skills, field, 0) if field != "pathogen" else lab.max_pathogens
    if field == "qualification" and current >= 60:
        return await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", show_alert=True)

    cost = calc_cost(field, current)
    text = (
        f"<b>{params['emoji']} –ü—Ä–æ–∫–∞—á–∫–∞ {params['name']} –Ω–∞ 1 —É—Ä (–¥–æ {current+1})\n"
        f"üß¨ –¶–µ–Ω–∞: {short_number(cost)} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>\n\n"
        f"<b><i>–ö–æ–º–∞–Ω–¥–∞: \"</i></b>"
        f"<code>{params['command']} {current+1}</code>"
        f"<b><i>\"</i></b>"
    )
    await callback.message.answer(text, reply_markup=confirm_keyboard(field, user_id))
    await callback.answer()

@router.callback_query(F.data.startswith("confirm:"))
async def confirm_upgrade(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    try:
        _, field, owner = callback.data.split(":", 2)
    except ValueError:
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", show_alert=True)
    if int(owner) != user_id:
        return await callback.answer("–Ω–µ —à–∞–ª–∏, —à–∞–ª—É–Ω–∏—à–∫–∞", show_alert=True)

    try:
        player = await get_player_cached(user_id)
    except DoesNotExist:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start", show_alert=True)

    lab    = await get_lab_cached(player)
    skills = await get_skill_cached(lab)
    stats  = await get_stats_cached(lab)
    params = UPGRADE_PARAMS[field]

    current = getattr(skills, field, 0) if field != "pathogen" else lab.max_pathogens
    if field == "qualification" and current >= 60:
        return await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", show_alert=True)

    cost = calc_cost(field, current)
    if stats.bio_resource < cost:
        return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤", show_alert=True)
    stats.bio_resource -= cost
    await stats.save()

    if field == "pathogen":
        old = lab.max_pathogens
        lab.max_pathogens += 1
        lab.free_pathogens += 1
        await lab.save()
    else:
        old = getattr(skills, field, 0)
        setattr(skills, field, old+1)
        await skills.save()
        if field == "qualification":
            await process_pathogens(lab, skills)

    await callback.message.edit_text(
        f"{params['emoji']} –£—Å–∏–ª–µ–Ω–∏–µ {params['name']} –Ω–∞ {old} —É—Ä (–¥–æ {old+1}) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        f"üéâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: üß¨ {short_number(cost)} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤",
        reply_markup=hide_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "hide")
async def hide_message(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer()

@router.message(F.text.regexp(r'^[/\.]?\+\+'))
async def upgrade_by_command(message: types.Message):
    text    = message.text.lstrip('./').strip()
    parts   = text.split(maxsplit=1)
    command = parts[0].lower()
    arg     = parts[1] if len(parts)>1 else '1'

    field = COMMAND_TO_FIELD.get(command)
    if not field:
        return

    try:
        player = await get_player_cached(message.from_user.id)
    except DoesNotExist:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")

    lab    = await get_lab_cached(player)
    skills = await get_skill_cached(lab)
    stats  = await get_stats_cached(lab)

    current = getattr(skills, field, 0) if field!='pathogen' else lab.max_pathogens

    if arg.lower() == '–º–∞–∫—Å':
        limit = 60-current if field=='qualification' else 100
        amount, cost = calc_max_purchase(field, current, stats.bio_resource, limit=limit)
        if amount == 0:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤")
    else:
        try:
            amount = int(arg)
        except ValueError:
            return await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–º–∞–∫—Å'")
        limit = 60-current if field=='qualification' else 100
        amount = max(1, min(limit, amount))
        cost = calc_total_cost(field, current, amount)
        if cost > stats.bio_resource:
            return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤")

    stats.bio_resource -= cost
    await stats.save()

    if field == 'pathogen':
        lab.max_pathogens += amount
        lab.free_pathogens += amount
        new_level = lab.max_pathogens
        await lab.save()
    else:
        setattr(skills, field, current+amount)
        new_level = current+amount
        await skills.save()
        if field=='qualification':
            await process_pathogens(lab, skills)

    params = UPGRADE_PARAMS[field]
    await message.answer(
        f"{params['emoji']}<b> –£—Å–∏–ª–µ–Ω–∏–µ {params['name']} –Ω–∞ {amount} (–¥–æ {new_level}) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        f"üéâ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: üß¨ {short_number(cost)} –±–∏–æ-—Ä–µ—Å—É—Ä—Å–æ–≤</b>"
    )
