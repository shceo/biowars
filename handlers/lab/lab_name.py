from aiogram import Router, types, F
import re

from utils.validation import contains_link_or_mention
from tortoise.exceptions import DoesNotExist

from services.lab_service import get_player_cached, get_lab_cached
from models.laboratory import Laboratory

router = Router()

@router.message(F.text.regexp(r'^-–ª–∞–±$', flags=re.IGNORECASE))
async def clear_lab_name(message: types.Message):
    try:
        player = await get_player_cached(message.from_user.id)
    except DoesNotExist:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

    lab = await get_lab_cached(player)
    lab.lab_name = None
    await lab.save()

    await message.answer("‚ùé –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω–æ")


@router.message(F.text.regexp(r'^\.–∏–º—è\s+–ª–∞–±—ã\s+.+', flags=re.IGNORECASE))
async def set_lab_name(message: types.Message):
    match = re.match(r'^\.–∏–º—è\s+–ª–∞–±—ã\s+(.+)$', message.text, flags=re.IGNORECASE)
    if not match:
        return

    name = match.group(1).strip()
    if len(name) > 30:
        return await message.answer("‚ùå –ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤.")

    if contains_link_or_mention(name):
        return await message.answer("üìã –°—Å—ã–ª–∫–∏ –≤ –∏–º–µ–Ω–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")

    try:
        player = await get_player_cached(message.from_user.id)
    except DoesNotExist:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")

    exists = await Laboratory.filter(lab_name__iexact=name).exists()
    if exists:
        return await message.answer("üóì –¢–∞–∫–æ–µ –∏–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    lab = await get_lab_cached(player)
    lab.lab_name = name
    await lab.save()

    await message.answer("<b>‚úÖ –ò–º—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.</b>")
